package com.example.moviesapp.uiimport android.os.Bundleimport android.util.Logimport android.view.Viewimport android.view.inputmethod.EditorInfoimport android.widget.TextView.OnEditorActionListenerimport androidx.fragment.app.Fragmentimport androidx.lifecycle.ViewModelProviderimport androidx.navigation.fragment.findNavControllerimport com.example.moviesapp.Rimport com.example.moviesapp.data.entity.Movieimport com.example.moviesapp.databinding.FragmentMoviesListBindingimport com.example.moviesapp.roomDB.MainDatabaseimport com.example.moviesapp.ui.adapter.MovieAdapterimport com.example.moviesapp.util.Statusimport com.example.moviesapp.viewmodel.MovieViewModelimport com.example.moviesapp.viewmodel.ViewModelFactoryimport kotlinx.coroutines.CoroutineScopeimport kotlinx.coroutines.SupervisorJobclass MoviesListFragment : Fragment(R.layout.fragment_movies_list) {    lateinit var binding: FragmentMoviesListBinding    lateinit var viewModel: MovieViewModel    private val TAG = "MoviesListFragment"    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {        super.onViewCreated(view, savedInstanceState)        binding = FragmentMoviesListBinding.bind(view)        init()        viewModel.getAllMovies()        fetchMovies()        searchMovies()        binding.apply {            etSearch.setOnEditorActionListener { v, actionId, event ->                viewModel.searchMovies(etSearch.text.toString())                true            }        }    }    private fun initRecycleView(data: ArrayList<Movie>) {        val adapter = MovieAdapter(data)        binding.rvMovie.adapter = adapter        adapter.onItemClick = {            val action =                MoviesListFragmentDirections.actionMoviesListFragmentToMovieDetailsFragment(it)            findNavController().navigate(action)        }        adapter.onEditClick = { movie ->            val action =                MoviesListFragmentDirections.actionMoviesListFragmentToAddMovieFragment(movie)            findNavController().navigate(action)        }        adapter.onDeleteClick = { movie ->            viewModel.deleteMovie(movie.id)        }    }    private fun fetchMovies() {        viewModel.allMoviesLiveData.observe(viewLifecycleOwner) {            when (it.status) {                Status.SUCCESS -> {                    binding.progressBar.visibility = View.GONE                    Log.e(TAG, "fetchMovies:SUCCESS ${it.data} ")                    it.data?.let { it1 -> initRecycleView(ArrayList(it1)) }                }                Status.LOADING -> {                    binding.progressBar.visibility = View.VISIBLE                    Log.e(TAG, "fetchMovies:LOADING ")                }                Status.ERROR -> {                    binding.progressBar.visibility = View.GONE                    Log.e(TAG, "fetchMovies:ERROR ${it.message} ")                }            }        }    }    private fun searchMovies() {        viewModel.searchMoviesLiveData.observe(viewLifecycleOwner) {            when (it.status) {                Status.SUCCESS -> {                    binding.progressBar.visibility = View.GONE                    Log.e(TAG, "fetchMovies:SUCCESS ${it.data} ")                    it.data?.let { it1 -> initRecycleView(ArrayList(it1)) }                }                Status.LOADING -> {                    binding.progressBar.visibility = View.GONE                    Log.e(TAG, "fetchMovies:LOADING ")                }                Status.ERROR -> {                    binding.progressBar.visibility = View.GONE                    Log.e(TAG, "fetchMovies:ERROR ${it.message} ")                }            }        }    }    private fun init() {        val roomDb = MainDatabase.getDatabase(requireContext(), CoroutineScope(SupervisorJob()))        val factory = ViewModelFactory(movieDao = roomDb.movieDao())        viewModel = ViewModelProvider(this, factory)[MovieViewModel::class.java]    }}